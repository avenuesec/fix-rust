// Generated file.
// Structs, enums to support parsing/generation of fix messages

#![ignore(unused_imports)]
#![ignore(unused_variables)]
#![ignore(dead_code)]

use std::str::{FromStr};
use std::{io, str, char, i32};
use std::io::Write;
use std::default::{Default};
use std::borrow::Cow;

use bytes::BytesMut;
use chrono::prelude::*;  // DateTime
// use serde::{Serialize,Deserialize,Deserializer,Serializer};


use frame::{FieldVal};
use fixmessage::*;


use std::fmt::{self, Debug, Formatter, Display, Error};

#[derive(PartialEq,Serialize,Deserialize,Default,Clone)]
pub struct FixHeader {
    pub begin_string : Cow<'static, str>,
    {{#each header.fields as |f| }}
    pub {{ f.vname }} : {{#if f.is_required }}{{ f.rust_type }}{{else }}Option<{{ f.rust_type }}>{{/if}}, // FIELD_{{upper f.name }} {{f.fld_tag }}
{{~/each }}
}

// TODO: generate this too, maybe for all custom struct/fields?
impl Debug for FixHeader {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut d = f.debug_struct("FixHeader");

        d.field("sender", &self.sender_comp_id);
        d.field("target", &self.target_comp_id);
        d.field("seq", &self.msg_seq_num);
        d.field("sending_time", &self.sending_time);

        if self.on_behalf_of_comp_id.is_some() {
            d.field("on_behalf_of_comp_id", &self.on_behalf_of_comp_id);
        }
        if self.poss_dup_flag.is_some() {
            d.field("poss_dup_flag", &self.poss_dup_flag);
        }
        if self.orig_sending_time.is_some() {
            d.field("orig_sending_time", &self.orig_sending_time);
        }

        d.finish();
        Ok( () )
    }
}

// size of enum = tag + size of largest message, so we box the fields
#[derive(PartialEq,Debug,Serialize,Deserialize,Clone)]
pub enum FixMessage { 
    {{~#each flatmessages as |msg|}}
    // type: {{msg.msg_type}}
    {{msg.name}}(Box<{{msg.rust_type}}>),
    {{~/each}}
    // fixed, for when the parser can't figure out the message type
    UndefinedMessage,
}

impl FixMessage {
    pub fn msg_type(&self) -> FieldMsgTypeEnum {
        match self {
            {{~#each msg_type as |m| }}
            &FixMessage::{{ m.message_name }}(_) => FieldMsgTypeEnum::{{capitalize m.enum_name }},      // {{m.msg_type}}
            {{~/each }}
            _ => unreachable!()
        }
    }
}

// message struct Fields

{{~#each flatmessages as |msg|}}

#[derive(PartialEq,Debug,Default,Serialize,Deserialize,Clone)]
pub struct {{msg.rust_type}} {
    {{#each msg.fields as |f| ~}}
    {{#if f.is_top_level ~}}
    pub {{ f.vname }} : {{#if f.is_required }}{{ f.rust_type }}{{else }}Option<{{ f.rust_type }}>{{/if}}, // FIELD_{{upper f.name }} {{f.fld_tag }}
    {{/if ~}}
    {{/each}}
}

{{~/each}}


// components struct Fields

{{#each components as |c|}}

#[derive(PartialEq,Debug,Default,Serialize,Deserialize,Clone)]
pub struct {{c.rust_type}} {
    {{#each c.fields as |f| ~}}
    {{#if f.is_top_level ~}}
    pub {{ f.vname }} : {{#if f.is_required }}{{ f.rust_type }}{{else }}Option<{{ f.rust_type }}>{{/if}}, // FIELD_{{upper f.name }} {{f.fld_tag }}
    {{/if ~}}
    {{/each}}
}

{{/each}}



// groups struct Fields

{{#each flatgroups as |c|}}

#[derive(PartialEq,Debug,Default,Serialize,Deserialize,Clone)]
pub struct {{c.rust_type}} {
    {{#each c.fields as |f| ~}}
    {{#if f.is_top_level ~}}
    pub {{ f.vname }} : {{#if f.is_required }}{{ f.rust_type }}{{else }}Option<{{ f.rust_type }}>{{/if}}, // FIELD_{{upper f.name }} {{f.fld_tag }}
    {{/if ~}}
    {{/each}}
}

{{/each}}


// Fields Constants / enums

{{#each fields as |f| ~}}
const FIELD_{{upper f.name  }} : u32 = {{ f.tag }}; // {{f.fld_type}}

{{#if f.is_enum }}
#[derive(PartialEq,Debug,Serialize,Deserialize,Clone,Copy)]
pub enum Field{{f.name }}Enum {
    {{#each f.enum_vals as |v| ~}}
        {{capitalize v.description}}, // = "{{v.enum_val}}"
    {{/each}}
    Undefined
}

impl FromStr for Field{{f.name }}Enum {
    type Err = OurParserError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            {{#each f.enum_vals as |v| ~}}
            "{{v.enum_val}}" => Ok(Field{{f.name }}Enum::{{capitalize v.description}}),
            {{/each}}
            _ => {
                Err(OurParserError { unregonized_val: s.to_string() })
            }
        }
    }
}

impl Display for Field{{f.name }}Enum {
  fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
    match self {
        {{#each f.enum_vals as |v| ~}}
        &Field{{f.name }}Enum::{{capitalize v.description}} => {
            f.write_str( "{{v.enum_val}}" )
        }, 
        {{/each}}
        _ => {
            Err(Error { })
        }
    }
  }
}

impl Default for Field{{f.name }}Enum {
    fn default() -> Self {
        Field{{f.name }}Enum::Undefined
    }
}
{{~/if}}
{{/each}}

// TODO: If type=Mulstring needs to impl trait BitOr as well

#[derive(Serialize,Deserialize,Clone)]
pub struct UtcDateTime(DateTime<Utc>);

impl UtcDateTime {
    pub fn new(dt: DateTime<Utc>) -> UtcDateTime {
        UtcDateTime( dt )
    }

    pub fn now() -> UtcDateTime {
        UtcDateTime( Utc::now() )
    }
}

impl Default for UtcDateTime {
    fn default() -> Self {
        UtcDateTime(Utc::now())
    }
}
impl PartialEq for UtcDateTime {
    fn eq(&self, other: &Self) -> bool{
        self.0.eq( &other.0 )
    }
}
impl Debug for UtcDateTime {
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        write!(f, "{}", self.0)
    }
}
impl FromStr for UtcDateTime {
    type Err = OurParserError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: more robust impl
        // Fix data type YYYYMMDD-HH:MM:SS.sss
        Ok( UtcDateTime( Utc.datetime_from_str(s, "%Y%m%d-%H:%M:%S%.3f").unwrap() ))
    }
}
impl Display for UtcDateTime {
  fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
    write!(f, "{}", self.0.format("%Y%m%d-%H:%M:%S%.3f")) // prob not efficient

  }
}

#[derive(Serialize,Deserialize,Clone)]
pub struct UtcDate(DateTime<Utc>);

impl UtcDate {
    pub fn new(dt: DateTime<Utc>) -> UtcDate {
        UtcDate( dt )
    }
}

impl Default for UtcDate {
    fn default() -> Self {
        UtcDate(Utc::now())
    }
}
impl PartialEq for UtcDate {
    fn eq(&self, other: &Self) -> bool{
        self.0.date().eq( &other.0.date() )
    }
}
impl Debug for UtcDate {
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        write!(f, "{}", self.0.date())
    }
}
impl FromStr for UtcDate {
    type Err = OurParserError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: more robust impl
        // Fix data type: YYYYMMDD
        Ok( UtcDate( Utc.datetime_from_str(s, "%Y%m%d").unwrap() ) )
    }
}
impl Display for UtcDate {
  fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
    write!(f, "{}", self.0.format("%Y%m%d"))
  }
}

#[derive(Serialize,Deserialize,Clone)]
pub struct UtcTime(DateTime<Utc>);

impl Default for UtcTime {
    fn default() -> Self {
        UtcTime(Utc::now())
    }
}
impl PartialEq for UtcTime {
    fn eq(&self, other: &Self) -> bool{
        self.0.eq( &other.0 )
    }
}
impl Debug for UtcTime {
    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
        write!(f, "{}", self.0)
    }
}
impl FromStr for UtcTime {
    type Err = OurParserError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: more robust impl
        // Fix data type: either HH:MM:SS (whole seconds) or HH:MM:SS.sss (milliseconds) format
        Ok( UtcTime( Utc.datetime_from_str(s, "%H:%M:%S%.3f").unwrap() ) )
    }
}
impl Display for UtcTime {
  fn fmt(&self, f: &mut Formatter) -> Result<(), Error> {
    write!(f, "{}", self.0.format("%H:%M:%S%.3f"))
  }
}

fn boolconv(v: &str) -> bool {
    v == "Y"
}
fn to_boolconv(val: &bool) -> &'static str {
    if *val {
        "Y"
    } else {
        "N"
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct OurParserError {
    unregonized_val : String,
}
